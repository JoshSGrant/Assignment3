
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;

public class Scramble2 {

    private int numWords = 0;   //to store # of words in words.txt
    private String[] wordList;  //Array variable to assign to array object holding list of words
    private String[] wordListRand;  //Array var to assign to array object holding RANDOMIZED list of words
    private int wordIndex = 0;  //Keeps track of which words the player is at in the game
    private String realWord;    //Hold realWord generated by getRealWord method

    /**
     * This constructor reads from words.txt and stores words in an array
     */
    public Scramble2() throws IOException{

        // Open file words.txt and create Scanner object to read it
        File file = new File("words.txt");
        Scanner wordFile =  new Scanner(file);
        Scanner wordFile2 = new Scanner(file);

        int num = 0;   //To store total number of words in file

        //Assign the total number of words in file as an int to numWords
        while(wordFile.hasNext()) {
            num++;
            numWords = num;
            wordFile.nextLine();
        }

        //Create array with "numWords" amount of elements and assigns the words it each
        wordList = new String[numWords];
        for(int i = 0; i < wordList.length && wordFile2.hasNext(); i++)
            wordList[i] = wordFile2.nextLine();
        wordFile.close();   //close words.txt

        //Randomize wordList array by copying it's elements at random to new array
        Random rand = new Random();
        wordListRand = new String[numWords];    //makes array for random order words with appropriate # of elements
        ArrayList<Integer> randTrack = new ArrayList<>();  //Keeps track of random numbers already generated
        int randNum;    //Hold a random number

        for(int i = 0; i < numWords; i++){

            //process in loop that generates array of non-repeating ints to use for index placement of random word array
            randNum = rand.nextInt(numWords);
            while (randTrack.contains(randNum)) {
                randNum = rand.nextInt(numWords);
            }
            randTrack.add(randNum); //assigns int randNum to spot i in randTrack array

            //assigns random wordList array element to wordListRand array elements
            wordListRand[i] = wordList[randNum];
        }

    }


    /**
     * This method chooses the next word from array wordList and returns it to the calling method.
     * Once all words have been used, returns null.
     * @return Next word chosen from the wordList array
     */
    public String getRealWord(){

        String word;    //Holds the next word from array. Changes each time method called

        //Gets next words from array. stores null if no element left in array
        if(wordIndex < numWords) {
            word = wordListRand[wordIndex];
            wordIndex++;
        }
        else
            word = null;

        realWord = word;
        return word;
    }


    public String getScrambledWord(){
        Random rand = new Random();
        String scramWord;   //Hold scrambled word from current real word
        String word = realWord;
        StringBuilder b = new StringBuilder();
        b.setLength(0);
        String test;
        if(word!=null){
        int wordLength = realWord.length(); //length of real word
        int randNum;    //hold random number
        ArrayList<Integer> randTrack = new ArrayList<>();  //Keeps track of random numbers already generated

        for(int i = 0; i < wordLength; i++) {
            randNum = rand.nextInt(wordLength); //generate random number
            while (randTrack.contains(randNum)) //if duplicate, regenerate
                randNum = rand.nextInt(wordLength);
            randTrack.add(randNum); //assigns int randNum to spot i in randTrack array
            b.append(realWord.charAt(randNum));
        }
        word = b.toString();
        }
        scramWord = word;

        return scramWord;
    }
}
